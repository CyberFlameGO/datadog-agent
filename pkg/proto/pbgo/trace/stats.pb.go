// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: datadog/trace/stats.proto

package trace

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StatsPayload is the payload used to send stats from the agent to the backend.
type StatsPayload struct {
	AgentHostname  string               `protobuf:"bytes,1,opt,name=agentHostname,proto3" json:"agentHostname,omitempty"`
	AgentEnv       string               `protobuf:"bytes,2,opt,name=agentEnv,proto3" json:"agentEnv,omitempty"`
	Stats          []ClientStatsPayload `protobuf:"bytes,3,rep,name=stats,proto3" json:"stats"`
	AgentVersion   string               `protobuf:"bytes,4,opt,name=agentVersion,proto3" json:"agentVersion,omitempty"`
	ClientComputed bool                 `protobuf:"varint,5,opt,name=clientComputed,proto3" json:"clientComputed,omitempty"`
}

func (m *StatsPayload) Reset()      { *m = StatsPayload{} }
func (*StatsPayload) ProtoMessage() {}
func (*StatsPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bac8ae77b0e40fd1, []int{0}
}
func (m *StatsPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsPayload.Merge(m, src)
}
func (m *StatsPayload) XXX_Size() int {
	return m.Size()
}
func (m *StatsPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsPayload.DiscardUnknown(m)
}

var xxx_messageInfo_StatsPayload proto.InternalMessageInfo

func (m *StatsPayload) GetAgentHostname() string {
	if m != nil {
		return m.AgentHostname
	}
	return ""
}

func (m *StatsPayload) GetAgentEnv() string {
	if m != nil {
		return m.AgentEnv
	}
	return ""
}

func (m *StatsPayload) GetStats() []ClientStatsPayload {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *StatsPayload) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

func (m *StatsPayload) GetClientComputed() bool {
	if m != nil {
		return m.ClientComputed
	}
	return false
}

// ClientStatsPayload is the first layer of span stats aggregation. It is also
// the payload sent by tracers to the agent when stats in tracer are enabled.
type ClientStatsPayload struct {
	// Hostname is the tracer hostname. It's extracted from spans with "_dd.hostname" meta
	// or set by tracer stats payload when hostname reporting is enabled.
	Hostname      string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Env           string              `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Version       string              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Stats         []ClientStatsBucket `protobuf:"bytes,4,rep,name=stats,proto3" json:"stats"`
	Lang          string              `protobuf:"bytes,5,opt,name=lang,proto3" json:"lang,omitempty"`
	TracerVersion string              `protobuf:"bytes,6,opt,name=tracerVersion,proto3" json:"tracerVersion,omitempty"`
	RuntimeID     string              `protobuf:"bytes,7,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
	Sequence      uint64              `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// AgentAggregation is set by the agent on tracer payloads modified by the agent aggregation layer
	// characterizes counts only and distributions only payloads
	AgentAggregation string `protobuf:"bytes,9,opt,name=agentAggregation,proto3" json:"agentAggregation,omitempty"`
	// Service is the main service of the tracer.
	// It is part of unified tagging: https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging
	Service string `protobuf:"bytes,10,opt,name=service,proto3" json:"service,omitempty"`
	// ContainerID specifies the origin container ID. It is meant to be populated by the client and may
	// be enhanced by the agent to ensure it is unique.
	ContainerID string `protobuf:"bytes,11,opt,name=containerID,proto3" json:"containerID,omitempty"`
	// Tags specifies a set of tags obtained from the orchestrator (where applicable) using the specified containerID.
	// This field should be left empty by the client. It only applies to some specific environment.
	Tags []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *ClientStatsPayload) Reset()      { *m = ClientStatsPayload{} }
func (*ClientStatsPayload) ProtoMessage() {}
func (*ClientStatsPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bac8ae77b0e40fd1, []int{1}
}
func (m *ClientStatsPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientStatsPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientStatsPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientStatsPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStatsPayload.Merge(m, src)
}
func (m *ClientStatsPayload) XXX_Size() int {
	return m.Size()
}
func (m *ClientStatsPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStatsPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStatsPayload proto.InternalMessageInfo

func (m *ClientStatsPayload) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ClientStatsPayload) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *ClientStatsPayload) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ClientStatsPayload) GetStats() []ClientStatsBucket {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *ClientStatsPayload) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *ClientStatsPayload) GetTracerVersion() string {
	if m != nil {
		return m.TracerVersion
	}
	return ""
}

func (m *ClientStatsPayload) GetRuntimeID() string {
	if m != nil {
		return m.RuntimeID
	}
	return ""
}

func (m *ClientStatsPayload) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ClientStatsPayload) GetAgentAggregation() string {
	if m != nil {
		return m.AgentAggregation
	}
	return ""
}

func (m *ClientStatsPayload) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ClientStatsPayload) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ClientStatsPayload) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// ClientStatsBucket is a time bucket containing aggregated stats.
type ClientStatsBucket struct {
	Start    uint64               `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Duration uint64               `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Stats    []ClientGroupedStats `protobuf:"bytes,3,rep,name=stats,proto3" json:"stats"`
	// AgentTimeShift is the shift applied by the agent stats aggregator on bucket start
	// when the received bucket start is outside of the agent aggregation window
	AgentTimeShift int64 `protobuf:"varint,4,opt,name=agentTimeShift,proto3" json:"agentTimeShift,omitempty"`
}

func (m *ClientStatsBucket) Reset()      { *m = ClientStatsBucket{} }
func (*ClientStatsBucket) ProtoMessage() {}
func (*ClientStatsBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_bac8ae77b0e40fd1, []int{2}
}
func (m *ClientStatsBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientStatsBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientStatsBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientStatsBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStatsBucket.Merge(m, src)
}
func (m *ClientStatsBucket) XXX_Size() int {
	return m.Size()
}
func (m *ClientStatsBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStatsBucket.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStatsBucket proto.InternalMessageInfo

func (m *ClientStatsBucket) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ClientStatsBucket) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ClientStatsBucket) GetStats() []ClientGroupedStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *ClientStatsBucket) GetAgentTimeShift() int64 {
	if m != nil {
		return m.AgentTimeShift
	}
	return 0
}

// ClientGroupedStats aggregate stats on spans grouped by service, name, resource, status_code, type
type ClientGroupedStats struct {
	Service        string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Resource       string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	HTTPStatusCode uint32 `protobuf:"varint,4,opt,name=HTTP_status_code,json=HTTPStatusCode,proto3" json:"HTTP_status_code,omitempty"`
	Type           string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	DBType         string `protobuf:"bytes,6,opt,name=DB_type,json=DBType,proto3" json:"DB_type,omitempty"`
	Hits           uint64 `protobuf:"varint,7,opt,name=hits,proto3" json:"hits,omitempty"`
	Errors         uint64 `protobuf:"varint,8,opt,name=errors,proto3" json:"errors,omitempty"`
	Duration       uint64 `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	OkSummary      []byte `protobuf:"bytes,10,opt,name=okSummary,proto3" json:"okSummary,omitempty"`
	ErrorSummary   []byte `protobuf:"bytes,11,opt,name=errorSummary,proto3" json:"errorSummary,omitempty"`
	Synthetics     bool   `protobuf:"varint,12,opt,name=synthetics,proto3" json:"synthetics,omitempty"`
	TopLevelHits   uint64 `protobuf:"varint,13,opt,name=topLevelHits,proto3" json:"topLevelHits,omitempty"`
}

func (m *ClientGroupedStats) Reset()      { *m = ClientGroupedStats{} }
func (*ClientGroupedStats) ProtoMessage() {}
func (*ClientGroupedStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_bac8ae77b0e40fd1, []int{3}
}
func (m *ClientGroupedStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGroupedStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGroupedStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGroupedStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGroupedStats.Merge(m, src)
}
func (m *ClientGroupedStats) XXX_Size() int {
	return m.Size()
}
func (m *ClientGroupedStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGroupedStats.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGroupedStats proto.InternalMessageInfo

func (m *ClientGroupedStats) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ClientGroupedStats) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientGroupedStats) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ClientGroupedStats) GetHTTPStatusCode() uint32 {
	if m != nil {
		return m.HTTPStatusCode
	}
	return 0
}

func (m *ClientGroupedStats) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClientGroupedStats) GetDBType() string {
	if m != nil {
		return m.DBType
	}
	return ""
}

func (m *ClientGroupedStats) GetHits() uint64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *ClientGroupedStats) GetErrors() uint64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *ClientGroupedStats) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ClientGroupedStats) GetOkSummary() []byte {
	if m != nil {
		return m.OkSummary
	}
	return nil
}

func (m *ClientGroupedStats) GetErrorSummary() []byte {
	if m != nil {
		return m.ErrorSummary
	}
	return nil
}

func (m *ClientGroupedStats) GetSynthetics() bool {
	if m != nil {
		return m.Synthetics
	}
	return false
}

func (m *ClientGroupedStats) GetTopLevelHits() uint64 {
	if m != nil {
		return m.TopLevelHits
	}
	return 0
}

func init() {
	proto.RegisterType((*StatsPayload)(nil), "datadog.trace.StatsPayload")
	proto.RegisterType((*ClientStatsPayload)(nil), "datadog.trace.ClientStatsPayload")
	proto.RegisterType((*ClientStatsBucket)(nil), "datadog.trace.ClientStatsBucket")
	proto.RegisterType((*ClientGroupedStats)(nil), "datadog.trace.ClientGroupedStats")
}

func init() { proto.RegisterFile("datadog/trace/stats.proto", fileDescriptor_bac8ae77b0e40fd1) }

var fileDescriptor_bac8ae77b0e40fd1 = []byte{
	// 683 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6a, 0xdb, 0x4a,
	0x14, 0xd5, 0x44, 0x8a, 0x13, 0x8f, 0xed, 0x90, 0x37, 0x84, 0xf7, 0xf4, 0x42, 0x98, 0xa7, 0x67,
	0x4a, 0x30, 0x5d, 0xd8, 0xd0, 0x6e, 0xdb, 0x45, 0x1d, 0x97, 0x26, 0xa5, 0x8b, 0x20, 0x9b, 0x2e,
	0xba, 0x09, 0x8a, 0x74, 0x23, 0x8b, 0xd8, 0x1a, 0x75, 0x34, 0x32, 0x78, 0x57, 0xe8, 0xae, 0xab,
	0x7e, 0x46, 0x17, 0xfd, 0x90, 0x2c, 0xb3, 0x0c, 0x14, 0x4a, 0xa3, 0x6c, 0xba, 0xcc, 0x27, 0x94,
	0xb9, 0xb2, 0x1c, 0x2b, 0xa1, 0xd0, 0xdd, 0x3d, 0x67, 0x66, 0xee, 0xdc, 0x73, 0x74, 0x46, 0xf4,
	0xdf, 0xc0, 0x53, 0x5e, 0x20, 0xc2, 0x9e, 0x92, 0x9e, 0x0f, 0xbd, 0x54, 0x79, 0x2a, 0xed, 0x26,
	0x52, 0x28, 0xc1, 0x5a, 0x8b, 0xa5, 0x2e, 0x2e, 0xed, 0xb6, 0x43, 0x11, 0x8a, 0x1e, 0x2e, 0x9d,
	0x66, 0x67, 0x3d, 0x8d, 0x10, 0x60, 0x55, 0x1c, 0x69, 0x7f, 0x23, 0xb4, 0x39, 0xd4, 0x2d, 0x8e,
	0xbd, 0xf9, 0x44, 0x78, 0x01, 0x7b, 0x44, 0x5b, 0x5e, 0x08, 0xb1, 0x3a, 0x14, 0xa9, 0x8a, 0xbd,
	0x29, 0xd8, 0xc4, 0x21, 0x9d, 0xba, 0x5b, 0x25, 0xd9, 0x2e, 0xdd, 0x44, 0xe2, 0x65, 0x3c, 0xb3,
	0xd7, 0x70, 0xc3, 0x12, 0xb3, 0xe7, 0x74, 0x1d, 0x87, 0xb2, 0x4d, 0xc7, 0xec, 0x34, 0x9e, 0xfc,
	0xdf, 0xad, 0x4c, 0xd5, 0x3d, 0x98, 0x44, 0x10, 0xab, 0xd5, 0x3b, 0xfb, 0xd6, 0xc5, 0xf7, 0xff,
	0x0c, 0xb7, 0x38, 0xc5, 0xda, 0xb4, 0x89, 0xad, 0xde, 0x82, 0x4c, 0x23, 0x11, 0xdb, 0x16, 0xb6,
	0xaf, 0x70, 0x6c, 0x9f, 0x6e, 0xf9, 0xd8, 0xe6, 0x40, 0x4c, 0x93, 0x4c, 0x41, 0x60, 0xaf, 0x3b,
	0xa4, 0xb3, 0xe9, 0xde, 0x63, 0xdb, 0x9f, 0x4c, 0xca, 0x1e, 0xde, 0xa7, 0xa7, 0x1f, 0x57, 0xe5,
	0x2d, 0x31, 0xdb, 0xa6, 0x26, 0x2c, 0x45, 0xe9, 0x92, 0xd9, 0x74, 0x63, 0xb6, 0x98, 0xc5, 0x44,
	0xb6, 0x84, 0xec, 0x59, 0xa9, 0xd4, 0x42, 0xa5, 0xce, 0xef, 0x95, 0xf6, 0x33, 0xff, 0x1c, 0x54,
	0x55, 0x28, 0xa3, 0xd6, 0xc4, 0x8b, 0x43, 0x1c, 0xbd, 0xee, 0x62, 0xad, 0xdd, 0xc7, 0xb3, 0xb2,
	0x54, 0x5f, 0x2b, 0xdc, 0xaf, 0x90, 0x6c, 0x8f, 0xd6, 0x65, 0x16, 0xab, 0x68, 0x0a, 0x47, 0x03,
	0x7b, 0x03, 0x77, 0xdc, 0x11, 0x5a, 0x5d, 0x0a, 0xef, 0x33, 0x88, 0x7d, 0xb0, 0x37, 0x1d, 0xd2,
	0xb1, 0xdc, 0x25, 0x66, 0x8f, 0xe9, 0x36, 0x1a, 0xf9, 0x22, 0x0c, 0x25, 0x84, 0x9e, 0xd2, 0x57,
	0xd4, 0xb1, 0xc1, 0x03, 0x5e, 0xeb, 0x4e, 0x41, 0xce, 0x22, 0x1f, 0x6c, 0x5a, 0xe8, 0x5e, 0x40,
	0xe6, 0xd0, 0x86, 0x2f, 0x62, 0xe5, 0x45, 0x31, 0xc8, 0xa3, 0x81, 0xdd, 0xc0, 0xd5, 0x55, 0x4a,
	0x6b, 0x53, 0x5e, 0x98, 0xda, 0x4d, 0xc7, 0xd4, 0xda, 0x74, 0xdd, 0xfe, 0x4a, 0xe8, 0x5f, 0x0f,
	0x2c, 0x61, 0x3b, 0xe8, 0xa1, 0x54, 0xf8, 0x21, 0x2c, 0xb7, 0x00, 0x5a, 0x43, 0x90, 0xc9, 0x62,
	0xbe, 0xb5, 0x42, 0x43, 0x89, 0xff, 0x2c, 0x5f, 0xaf, 0xa4, 0xc8, 0x12, 0x08, 0x8a, 0x9b, 0x2a,
	0xb6, 0xef, 0xd3, 0x2d, 0x94, 0x3a, 0x8a, 0xa6, 0x30, 0x1c, 0x47, 0x67, 0x0a, 0x13, 0x66, 0xba,
	0xf7, 0xd8, 0xf6, 0xc7, 0x65, 0x76, 0x56, 0x7b, 0xad, 0xba, 0x42, 0xaa, 0xae, 0x30, 0x6a, 0x61,
	0xa2, 0x8a, 0xe8, 0x58, 0xe5, 0x3b, 0x91, 0x90, 0x8a, 0x4c, 0xfa, 0xb0, 0x08, 0xcf, 0x12, 0xb3,
	0x0e, 0xdd, 0x3e, 0x1c, 0x8d, 0x8e, 0x4f, 0xf4, 0x58, 0x59, 0x7a, 0xe2, 0x8b, 0x00, 0x70, 0x94,
	0x96, 0xbb, 0xa5, 0xf9, 0x21, 0xd2, 0x07, 0x22, 0xc0, 0xce, 0x6a, 0x9e, 0x40, 0x99, 0x14, 0x5d,
	0xb3, 0x7f, 0xe8, 0xc6, 0xa0, 0x7f, 0x82, 0x74, 0x91, 0x91, 0xda, 0xa0, 0x3f, 0xd2, 0x0b, 0x8c,
	0x5a, 0xe3, 0x48, 0xa5, 0x98, 0x0b, 0xcb, 0xc5, 0x9a, 0xfd, 0x4d, 0x6b, 0x20, 0xa5, 0x90, 0xe9,
	0x22, 0x10, 0x0b, 0x54, 0xb1, 0xb9, 0x7e, 0xcf, 0xe6, 0x3d, 0x5a, 0x17, 0xe7, 0xc3, 0x6c, 0x3a,
	0xf5, 0xe4, 0x1c, 0x03, 0xd0, 0x74, 0xef, 0x08, 0xfd, 0x4a, 0xb1, 0x47, 0xb9, 0xa1, 0x81, 0x1b,
	0x2a, 0x1c, 0xe3, 0x94, 0xa6, 0xf3, 0x58, 0x8d, 0x41, 0x45, 0xbe, 0x8e, 0x82, 0x7e, 0xa1, 0x2b,
	0x8c, 0xee, 0xa1, 0x44, 0xf2, 0x06, 0x66, 0x30, 0x39, 0xd4, 0x13, 0xb7, 0x70, 0x82, 0x0a, 0xd7,
	0x7f, 0x7d, 0x79, 0xcd, 0x8d, 0xab, 0x6b, 0x6e, 0xdc, 0x5e, 0x73, 0xf2, 0x21, 0xe7, 0xe4, 0x4b,
	0xce, 0xc9, 0x45, 0xce, 0xc9, 0x65, 0xce, 0xc9, 0x8f, 0x9c, 0x93, 0x9f, 0x39, 0x37, 0x6e, 0x73,
	0x4e, 0x3e, 0xdf, 0x70, 0xe3, 0xf2, 0x86, 0x1b, 0x57, 0x37, 0xdc, 0x78, 0xb7, 0x93, 0x9c, 0x87,
	0xc5, 0x8f, 0xaf, 0x97, 0x9c, 0x86, 0xa2, 0xf8, 0x55, 0x9e, 0xd6, 0x90, 0x79, 0xfa, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0xdd, 0xff, 0x1e, 0x1c, 0x42, 0x05, 0x00, 0x00,
}

func (this *StatsPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatsPayload)
	if !ok {
		that2, ok := that.(StatsPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AgentHostname != that1.AgentHostname {
		return false
	}
	if this.AgentEnv != that1.AgentEnv {
		return false
	}
	if len(this.Stats) != len(that1.Stats) {
		return false
	}
	for i := range this.Stats {
		if !this.Stats[i].Equal(&that1.Stats[i]) {
			return false
		}
	}
	if this.AgentVersion != that1.AgentVersion {
		return false
	}
	if this.ClientComputed != that1.ClientComputed {
		return false
	}
	return true
}
func (this *ClientStatsPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientStatsPayload)
	if !ok {
		that2, ok := that.(ClientStatsPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.Env != that1.Env {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Stats) != len(that1.Stats) {
		return false
	}
	for i := range this.Stats {
		if !this.Stats[i].Equal(&that1.Stats[i]) {
			return false
		}
	}
	if this.Lang != that1.Lang {
		return false
	}
	if this.TracerVersion != that1.TracerVersion {
		return false
	}
	if this.RuntimeID != that1.RuntimeID {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if this.AgentAggregation != that1.AgentAggregation {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.ContainerID != that1.ContainerID {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *ClientStatsBucket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientStatsBucket)
	if !ok {
		that2, ok := that.(ClientStatsBucket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if len(this.Stats) != len(that1.Stats) {
		return false
	}
	for i := range this.Stats {
		if !this.Stats[i].Equal(&that1.Stats[i]) {
			return false
		}
	}
	if this.AgentTimeShift != that1.AgentTimeShift {
		return false
	}
	return true
}
func (this *ClientGroupedStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientGroupedStats)
	if !ok {
		that2, ok := that.(ClientGroupedStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Resource != that1.Resource {
		return false
	}
	if this.HTTPStatusCode != that1.HTTPStatusCode {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DBType != that1.DBType {
		return false
	}
	if this.Hits != that1.Hits {
		return false
	}
	if this.Errors != that1.Errors {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if !bytes.Equal(this.OkSummary, that1.OkSummary) {
		return false
	}
	if !bytes.Equal(this.ErrorSummary, that1.ErrorSummary) {
		return false
	}
	if this.Synthetics != that1.Synthetics {
		return false
	}
	if this.TopLevelHits != that1.TopLevelHits {
		return false
	}
	return true
}
func (this *StatsPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&trace.StatsPayload{")
	s = append(s, "AgentHostname: "+fmt.Sprintf("%#v", this.AgentHostname)+",\n")
	s = append(s, "AgentEnv: "+fmt.Sprintf("%#v", this.AgentEnv)+",\n")
	if this.Stats != nil {
		vs := make([]ClientStatsPayload, len(this.Stats))
		for i := range vs {
			vs[i] = this.Stats[i]
		}
		s = append(s, "Stats: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "AgentVersion: "+fmt.Sprintf("%#v", this.AgentVersion)+",\n")
	s = append(s, "ClientComputed: "+fmt.Sprintf("%#v", this.ClientComputed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientStatsPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&trace.ClientStatsPayload{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "Env: "+fmt.Sprintf("%#v", this.Env)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Stats != nil {
		vs := make([]ClientStatsBucket, len(this.Stats))
		for i := range vs {
			vs[i] = this.Stats[i]
		}
		s = append(s, "Stats: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Lang: "+fmt.Sprintf("%#v", this.Lang)+",\n")
	s = append(s, "TracerVersion: "+fmt.Sprintf("%#v", this.TracerVersion)+",\n")
	s = append(s, "RuntimeID: "+fmt.Sprintf("%#v", this.RuntimeID)+",\n")
	s = append(s, "Sequence: "+fmt.Sprintf("%#v", this.Sequence)+",\n")
	s = append(s, "AgentAggregation: "+fmt.Sprintf("%#v", this.AgentAggregation)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "ContainerID: "+fmt.Sprintf("%#v", this.ContainerID)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientStatsBucket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&trace.ClientStatsBucket{")
	s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	if this.Stats != nil {
		vs := make([]ClientGroupedStats, len(this.Stats))
		for i := range vs {
			vs[i] = this.Stats[i]
		}
		s = append(s, "Stats: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "AgentTimeShift: "+fmt.Sprintf("%#v", this.AgentTimeShift)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientGroupedStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&trace.ClientGroupedStats{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Resource: "+fmt.Sprintf("%#v", this.Resource)+",\n")
	s = append(s, "HTTPStatusCode: "+fmt.Sprintf("%#v", this.HTTPStatusCode)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DBType: "+fmt.Sprintf("%#v", this.DBType)+",\n")
	s = append(s, "Hits: "+fmt.Sprintf("%#v", this.Hits)+",\n")
	s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "OkSummary: "+fmt.Sprintf("%#v", this.OkSummary)+",\n")
	s = append(s, "ErrorSummary: "+fmt.Sprintf("%#v", this.ErrorSummary)+",\n")
	s = append(s, "Synthetics: "+fmt.Sprintf("%#v", this.Synthetics)+",\n")
	s = append(s, "TopLevelHits: "+fmt.Sprintf("%#v", this.TopLevelHits)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStats(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StatsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientComputed {
		i--
		if m.ClientComputed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.AgentVersion) > 0 {
		i -= len(m.AgentVersion)
		copy(dAtA[i:], m.AgentVersion)
		i = encodeVarintStats(dAtA, i, uint64(len(m.AgentVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AgentEnv) > 0 {
		i -= len(m.AgentEnv)
		copy(dAtA[i:], m.AgentEnv)
		i = encodeVarintStats(dAtA, i, uint64(len(m.AgentEnv)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AgentHostname) > 0 {
		i -= len(m.AgentHostname)
		copy(dAtA[i:], m.AgentHostname)
		i = encodeVarintStats(dAtA, i, uint64(len(m.AgentHostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientStatsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientStatsPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientStatsPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintStats(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ContainerID) > 0 {
		i -= len(m.ContainerID)
		copy(dAtA[i:], m.ContainerID)
		i = encodeVarintStats(dAtA, i, uint64(len(m.ContainerID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AgentAggregation) > 0 {
		i -= len(m.AgentAggregation)
		copy(dAtA[i:], m.AgentAggregation)
		i = encodeVarintStats(dAtA, i, uint64(len(m.AgentAggregation)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Sequence != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RuntimeID) > 0 {
		i -= len(m.RuntimeID)
		copy(dAtA[i:], m.RuntimeID)
		i = encodeVarintStats(dAtA, i, uint64(len(m.RuntimeID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TracerVersion) > 0 {
		i -= len(m.TracerVersion)
		copy(dAtA[i:], m.TracerVersion)
		i = encodeVarintStats(dAtA, i, uint64(len(m.TracerVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientStatsBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientStatsBucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientStatsBucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgentTimeShift != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.AgentTimeShift))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Duration != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientGroupedStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGroupedStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGroupedStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopLevelHits != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TopLevelHits))
		i--
		dAtA[i] = 0x68
	}
	if m.Synthetics {
		i--
		if m.Synthetics {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.ErrorSummary) > 0 {
		i -= len(m.ErrorSummary)
		copy(dAtA[i:], m.ErrorSummary)
		i = encodeVarintStats(dAtA, i, uint64(len(m.ErrorSummary)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.OkSummary) > 0 {
		i -= len(m.OkSummary)
		copy(dAtA[i:], m.OkSummary)
		i = encodeVarintStats(dAtA, i, uint64(len(m.OkSummary)))
		i--
		dAtA[i] = 0x52
	}
	if m.Duration != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x48
	}
	if m.Errors != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Errors))
		i--
		dAtA[i] = 0x40
	}
	if m.Hits != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Hits))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DBType) > 0 {
		i -= len(m.DBType)
		copy(dAtA[i:], m.DBType)
		i = encodeVarintStats(dAtA, i, uint64(len(m.DBType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if m.HTTPStatusCode != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.HTTPStatusCode))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StatsPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentHostname)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.AgentEnv)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovStats(uint64(l))
		}
	}
	l = len(m.AgentVersion)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if m.ClientComputed {
		n += 2
	}
	return n
}

func (m *ClientStatsPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovStats(uint64(l))
		}
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.TracerVersion)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.RuntimeID)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovStats(uint64(m.Sequence))
	}
	l = len(m.AgentAggregation)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.ContainerID)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovStats(uint64(l))
		}
	}
	return n
}

func (m *ClientStatsBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovStats(uint64(m.Start))
	}
	if m.Duration != 0 {
		n += 1 + sovStats(uint64(m.Duration))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovStats(uint64(l))
		}
	}
	if m.AgentTimeShift != 0 {
		n += 1 + sovStats(uint64(m.AgentTimeShift))
	}
	return n
}

func (m *ClientGroupedStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if m.HTTPStatusCode != 0 {
		n += 1 + sovStats(uint64(m.HTTPStatusCode))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.DBType)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if m.Hits != 0 {
		n += 1 + sovStats(uint64(m.Hits))
	}
	if m.Errors != 0 {
		n += 1 + sovStats(uint64(m.Errors))
	}
	if m.Duration != 0 {
		n += 1 + sovStats(uint64(m.Duration))
	}
	l = len(m.OkSummary)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.ErrorSummary)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if m.Synthetics {
		n += 2
	}
	if m.TopLevelHits != 0 {
		n += 1 + sovStats(uint64(m.TopLevelHits))
	}
	return n
}

func sovStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StatsPayload) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStats := "[]ClientStatsPayload{"
	for _, f := range this.Stats {
		repeatedStringForStats += strings.Replace(strings.Replace(f.String(), "ClientStatsPayload", "ClientStatsPayload", 1), `&`, ``, 1) + ","
	}
	repeatedStringForStats += "}"
	s := strings.Join([]string{`&StatsPayload{`,
		`AgentHostname:` + fmt.Sprintf("%v", this.AgentHostname) + `,`,
		`AgentEnv:` + fmt.Sprintf("%v", this.AgentEnv) + `,`,
		`Stats:` + repeatedStringForStats + `,`,
		`AgentVersion:` + fmt.Sprintf("%v", this.AgentVersion) + `,`,
		`ClientComputed:` + fmt.Sprintf("%v", this.ClientComputed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientStatsPayload) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStats := "[]ClientStatsBucket{"
	for _, f := range this.Stats {
		repeatedStringForStats += strings.Replace(strings.Replace(f.String(), "ClientStatsBucket", "ClientStatsBucket", 1), `&`, ``, 1) + ","
	}
	repeatedStringForStats += "}"
	s := strings.Join([]string{`&ClientStatsPayload{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`Env:` + fmt.Sprintf("%v", this.Env) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Stats:` + repeatedStringForStats + `,`,
		`Lang:` + fmt.Sprintf("%v", this.Lang) + `,`,
		`TracerVersion:` + fmt.Sprintf("%v", this.TracerVersion) + `,`,
		`RuntimeID:` + fmt.Sprintf("%v", this.RuntimeID) + `,`,
		`Sequence:` + fmt.Sprintf("%v", this.Sequence) + `,`,
		`AgentAggregation:` + fmt.Sprintf("%v", this.AgentAggregation) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`ContainerID:` + fmt.Sprintf("%v", this.ContainerID) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientStatsBucket) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStats := "[]ClientGroupedStats{"
	for _, f := range this.Stats {
		repeatedStringForStats += strings.Replace(strings.Replace(f.String(), "ClientGroupedStats", "ClientGroupedStats", 1), `&`, ``, 1) + ","
	}
	repeatedStringForStats += "}"
	s := strings.Join([]string{`&ClientStatsBucket{`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Stats:` + repeatedStringForStats + `,`,
		`AgentTimeShift:` + fmt.Sprintf("%v", this.AgentTimeShift) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientGroupedStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientGroupedStats{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Resource:` + fmt.Sprintf("%v", this.Resource) + `,`,
		`HTTPStatusCode:` + fmt.Sprintf("%v", this.HTTPStatusCode) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DBType:` + fmt.Sprintf("%v", this.DBType) + `,`,
		`Hits:` + fmt.Sprintf("%v", this.Hits) + `,`,
		`Errors:` + fmt.Sprintf("%v", this.Errors) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`OkSummary:` + fmt.Sprintf("%v", this.OkSummary) + `,`,
		`ErrorSummary:` + fmt.Sprintf("%v", this.ErrorSummary) + `,`,
		`Synthetics:` + fmt.Sprintf("%v", this.Synthetics) + `,`,
		`TopLevelHits:` + fmt.Sprintf("%v", this.TopLevelHits) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStats(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StatsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentEnv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentEnv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, ClientStatsPayload{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientComputed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientComputed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientStatsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientStatsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientStatsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, ClientStatsBucket{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TracerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAggregation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAggregation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientStatsBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientStatsBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientStatsBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, ClientGroupedStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentTimeShift", wireType)
			}
			m.AgentTimeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentTimeShift |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGroupedStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGroupedStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGroupedStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPStatusCode", wireType)
			}
			m.HTTPStatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HTTPStatusCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DBType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hits", wireType)
			}
			m.Hits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			m.Errors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OkSummary", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OkSummary = append(m.OkSummary[:0], dAtA[iNdEx:postIndex]...)
			if m.OkSummary == nil {
				m.OkSummary = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorSummary", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorSummary = append(m.ErrorSummary[:0], dAtA[iNdEx:postIndex]...)
			if m.ErrorSummary == nil {
				m.ErrorSummary = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synthetics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Synthetics = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLevelHits", wireType)
			}
			m.TopLevelHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopLevelHits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStats = fmt.Errorf("proto: unexpected end of group")
)
